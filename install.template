#!/bin/bash

# AutoUpdater Complete Installation Script (Bootstrapper)
# This script acts as a bootstrapper that:
# 1. Downloads required scripts if not present locally (with checksum verification)
# 2. Installs Docker and Docker Compose
# 3. Installs VPN (OpenVPN for Ubuntu 20.04, WireGuard for 22.04+)
# 4. Installs AutoUpdater
#
# Security: All downloaded scripts are verified using SHA256 checksums
# Checksums are automatically updated by update-checksums.sh (run via pre-commit hook)
#
# Usage: ./install.sh [--json] <app-name> <git-compose-url> <computer-name>
# Example: ./install.sh rocket-welder https://github.com/modelingevolution/rocketwelder-compose.git RESRV-AI

set -e

# Global variables
JSON_OUTPUT=false
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Parse arguments
parse_arguments() {
    if [[ "$1" == "--json" ]]; then
        JSON_OUTPUT=true
        shift
    fi
    
    if [ $# -lt 3 ] || [ $# -gt 5 ]; then
        if [ "$JSON_OUTPUT" = true ]; then
            echo '{"status":"error","message":"Usage: ./install.sh [--json] <app-name> <git-compose-url> <computer-name> [docker-auth] [docker-registry-url]"}'
        else
            echo "Usage: $0 [--json] <app-name> <git-compose-url> <computer-name> [docker-auth] [docker-registry-url]"
            echo "Example: $0 rocket-welder https://github.com/modelingevolution/rocketwelder-compose.git RESRV-AI"
            echo "Example with Docker auth: $0 rocket-welder https://github.com/modelingevolution/rocketwelder-compose.git RESRV-AI ghp_token123 ghcr.io/myorg"
        fi
        exit 1
    fi
    
    APP_NAME="$1"
    GIT_COMPOSE_URL="$2"
    COMPUTER_NAME="$3"
    DOCKER_AUTH="${4:-}"
    DOCKER_REGISTRY_URL="${5:-}"
    
    # Validate Docker parameters - both must be provided or both empty
    if [ -n "$DOCKER_AUTH" ] && [ -z "$DOCKER_REGISTRY_URL" ]; then
        log_json "error" "docker-registry-url must be provided when docker-auth is specified"
        exit 1
    fi
    if [ -z "$DOCKER_AUTH" ] && [ -n "$DOCKER_REGISTRY_URL" ]; then
        log_json "error" "docker-auth must be provided when docker-registry-url is specified"
        exit 1
    fi
}

# Logging functions
log_json() {
    local level="$1"
    local message="$2"
    local step="${3:-}"
    
    if [ "$JSON_OUTPUT" = true ]; then
        if [ -n "$step" ]; then
            echo "{\"status\":\"$level\",\"step\":\"$step\",\"message\":\"$message\"}"
        else
            echo "{\"status\":\"$level\",\"message\":\"$message\"}"
        fi
    else
        case $level in
            "info") echo -e "\e[32m[INFO]\e[0m $message" ;;
            "warn") echo -e "\e[33m[WARN]\e[0m $message" ;;
            "error") echo -e "\e[31m[ERROR]\e[0m $message" ;;
            *) echo "$message" ;;
        esac
    fi
}

# Check if running as root
check_root() {
    if [ "$EUID" -ne 0 ]; then
        log_json "error" "This script must be run as root"
        exit 1
    fi
}

# Detect Ubuntu version
detect_ubuntu_version() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        if [[ "$ID" == "ubuntu" ]]; then
            UBUNTU_VERSION="$VERSION_ID"
            log_json "info" "Detected Ubuntu $UBUNTU_VERSION"
            return 0
        fi
    fi
    log_json "error" "This script only supports Ubuntu"
    exit 1
}

# Install Docker and Docker Compose
install_docker() {
    log_json "info" "Installing Docker and Docker Compose" "docker"
    
    # Check if Docker is already installed
    if command -v docker &> /dev/null; then
        log_json "info" "Docker already installed, checking version"
        DOCKER_VERSION=$(docker --version)
        log_json "info" "Current Docker version: $DOCKER_VERSION"
    else
        log_json "info" "Installing Docker"
        
        # Update package index
        apt-get update -qq
        
        # Install prerequisites
        apt-get install -y -qq \
            apt-transport-https \
            ca-certificates \
            curl \
            gnupg \
            lsb-release
        
        # Add Docker's official GPG key
        mkdir -p /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        
        # Set up the repository
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
        
        # Install Docker Engine
        apt-get update -qq
        apt-get install -y -qq docker-ce docker-ce-cli containerd.io docker-buildx-plugin
        
        # Enable and start Docker
        systemctl enable docker
        systemctl start docker
        
        log_json "info" "Docker installed successfully"
    fi
    
    # Check Docker Compose
    if command -v docker-compose &> /dev/null; then
        log_json "info" "Docker Compose (standalone) already installed"
    elif docker compose version &> /dev/null 2>&1; then
        log_json "info" "Docker Compose (plugin) already installed"
    else
        log_json "info" "Installing Docker Compose"
        
        # For Ubuntu 20.04, install standalone docker-compose, for newer versions use plugin
        if [[ "$UBUNTU_VERSION" == "20.04" ]]; then
            # Install standalone docker-compose for Ubuntu 20.04
            DOCKER_COMPOSE_VERSION="2.20.2"
            # Detect architecture
            ARCH=$(uname -m)
            case $ARCH in
                x86_64) DOCKER_ARCH="x86_64" ;;
                aarch64|arm64) DOCKER_ARCH="aarch64" ;;
                *) 
                    log_json "error" "Unsupported architecture: $ARCH"
                    exit 1
                    ;;
            esac
            curl -fsSL "https://github.com/docker/compose/releases/download/v${DOCKER_COMPOSE_VERSION}/docker-compose-linux-${DOCKER_ARCH}" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            log_json "info" "Docker Compose standalone installed successfully for $ARCH"
        else
            # Install Docker Compose plugin for newer Ubuntu versions
            apt-get install -y -qq docker-compose-plugin
            log_json "info" "Docker Compose plugin installed successfully"
        fi
    fi
    
    log_json "info" "Docker installation completed" "docker"
}

# Install VPN based on Ubuntu version
install_vpn() {
    log_json "info" "Installing VPN" "vpn"
    
    case "$UBUNTU_VERSION" in
        "20.04")
            install_openvpn
            ;;
        "22.04"|"24.04")
            install_wireguard
            ;;
        *)
            log_json "warn" "Unsupported Ubuntu version for VPN installation: $UBUNTU_VERSION"
            ;;
    esac
    
    log_json "info" "VPN installation completed" "vpn"
}

# Install OpenVPN for Ubuntu 20.04
install_openvpn() {
    if command -v openvpn &> /dev/null; then
        log_json "info" "OpenVPN already installed"
        return 0
    fi
    
    log_json "info" "Installing OpenVPN for Ubuntu 20.04"
    
    apt-get update -qq
    apt-get install -y -qq openvpn easy-rsa
    
    # Create easy-rsa directory
    if [ ! -d /etc/openvpn/easy-rsa ]; then
        make-cadir /etc/openvpn/easy-rsa
        log_json "info" "OpenVPN easy-rsa directory created at /etc/openvpn/easy-rsa"
    fi
    
    log_json "info" "OpenVPN installed successfully"
}

# Install WireGuard for Ubuntu 22.04/24.04
install_wireguard() {
    if command -v wg &> /dev/null; then
        log_json "info" "WireGuard already installed"
        return 0
    fi
    
    log_json "info" "Installing WireGuard for Ubuntu $UBUNTU_VERSION"
    
    apt-get update -qq
    apt-get install -y -qq wireguard wireguard-tools
    
    # Create WireGuard directory
    if [ ! -d /etc/wireguard ]; then
        mkdir -p /etc/wireguard
        chmod 700 /etc/wireguard
    fi
    
    log_json "info" "WireGuard installed successfully"
}

# Download and verify script with checksum
download_script() {
    local script_name="$1"
    local expected_checksum="$2"
    local script_path="$SCRIPT_DIR/$script_name"
    local download_needed=false
    
    # Check if script exists and verify checksum
    if [ ! -f "$script_path" ]; then
        download_needed=true
        log_json "info" "$script_name not found, downloading from GitHub repository"
    else
        # Verify existing script checksum
        local current_checksum=$(sha256sum "$script_path" | cut -d' ' -f1)
        if [ "$current_checksum" != "$expected_checksum" ]; then
            download_needed=true
            log_json "warn" "$script_name checksum mismatch (expected: $expected_checksum, got: $current_checksum), re-downloading"
        else
            log_json "info" "$script_name exists and checksum verified"
        fi
    fi
    
    if [ "$download_needed" = true ]; then
        local url="https://raw.githubusercontent.com/modelingevolution/autoupdater-compose/master/$script_name"
        
        if ! curl -fsSL "$url" -o "$script_path"; then
            log_json "error" "Failed to download $script_name from $url"
            exit 1
        fi
        
        # Verify downloaded script checksum
        local downloaded_checksum=$(sha256sum "$script_path" | cut -d' ' -f1)
        if [ "$downloaded_checksum" != "$expected_checksum" ]; then
            log_json "error" "Downloaded $script_name checksum verification failed (expected: $expected_checksum, got: $downloaded_checksum)"
            rm -f "$script_path"
            exit 1
        fi
        
        chmod +x "$script_path"
        log_json "info" "Successfully downloaded and verified $script_name"
    fi
}

# Perform Docker login if credentials provided
docker_login() {
    if [ -n "$DOCKER_AUTH" ] && [ -n "$DOCKER_REGISTRY_URL" ]; then
        log_json "info" "Logging into Docker registry: $DOCKER_REGISTRY_URL" "docker-login"
        
        # Login to Docker registry using the provided token
        if echo "$DOCKER_AUTH" | docker login "$DOCKER_REGISTRY_URL" --username "token" --password-stdin; then
            log_json "info" "Successfully logged into Docker registry"
        else
            log_json "error" "Failed to login to Docker registry $DOCKER_REGISTRY_URL"
            exit 1
        fi
    else
        log_json "info" "No Docker registry credentials provided, skipping login"
    fi
}

# Install AutoUpdater
install_autoupdater() {
    log_json "info" "Installing AutoUpdater" "autoupdater"
    
    # Expected checksums for dependent scripts (auto-generated by update-checksums.sh)
    local INSTALL_UPDATER_CHECKSUM="{{INSTALL_UPDATER_CHECKSUM}}"
    
    # Download and verify install-updater.sh
    download_script "install-updater.sh" "$INSTALL_UPDATER_CHECKSUM"
    
    local updater_script="$SCRIPT_DIR/install-updater.sh"
    
    # Run the updater installation with Docker parameters
    log_json "info" "Running AutoUpdater installation script"
    if [ -n "$DOCKER_AUTH" ] && [ -n "$DOCKER_REGISTRY_URL" ]; then
        if ! "$updater_script" "$APP_NAME" "$GIT_COMPOSE_URL" "$COMPUTER_NAME" "$DOCKER_AUTH" "$DOCKER_REGISTRY_URL"; then
            log_json "error" "AutoUpdater installation failed"
            exit 1
        fi
    else
        if ! "$updater_script" "$APP_NAME" "$GIT_COMPOSE_URL" "$COMPUTER_NAME"; then
            log_json "error" "AutoUpdater installation failed"
            exit 1
        fi
    fi
    
    log_json "info" "AutoUpdater installation completed" "autoupdater"
}

# Main installation function
main() {
    parse_arguments "$@"
    
    log_json "info" "Starting complete installation for $APP_NAME on $COMPUTER_NAME"
    
    # Check prerequisites
    check_root
    detect_ubuntu_version
    
    # Install curl if not present (needed for downloads)
    if ! command -v curl &> /dev/null; then
        log_json "info" "Installing curl"
        apt-get update -qq
        apt-get install -y -qq curl
    fi
    
    # Step 1: Install Docker and Docker Compose
    install_docker
    
    # Step 2: Install VPN
    install_vpn
    
    # Step 3: Perform Docker login (if credentials provided)
    docker_login
    
    # Step 4: Install AutoUpdater
    install_autoupdater
    
    if [ "$JSON_OUTPUT" = true ]; then
        echo '{"status":"success","message":"Installation completed successfully","app":"'$APP_NAME'","computer":"'$COMPUTER_NAME'","ubuntu_version":"'$UBUNTU_VERSION'"}'
    else
        log_json "info" "Installation completed successfully!"
        echo ""
        log_json "info" "Summary:"
        log_json "info" "  - Ubuntu version: $UBUNTU_VERSION"
        log_json "info" "  - Docker: Installed"
        log_json "info" "  - VPN: Installed ($([ "$UBUNTU_VERSION" = "20.04" ] && echo "OpenVPN" || echo "WireGuard"))"
        log_json "info" "  - AutoUpdater: Installed for $APP_NAME"
        log_json "info" "  - Web UI: http://localhost:8080"
    fi
}

# Run main function
main "$@"